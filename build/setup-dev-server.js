const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')

process.traceDeprecation = true

module.exports = function setupDevServer(app, cb) {
  let bundle, clientManifest
  let resolve
  let resolved = false
  const readyPromise = new Promise(r => {
    resolve = r
  })
  const ready = (...args) => {
    if (!resolved) resolve()
    cb(...args)
  }

  // Config client for webpack-hot-middleware
  // https://github.com/webpack-contrib/webpack-hot-middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  //clientCompiler
  const client = webpack(clientConfig)
  const devMiddleware = require('webpack-dev-middleware')(client, {
    publicPath: clientConfig.output.publicPath,
    stats: {
      colors: true,
      modules: false,
      children: false,
      entrypoints: false,
    },
    watchOptions: {
      aggregateTimeout: 300,
      poll: 1000
    }
  })
  app.use(devMiddleware)
  client.plugin('done', () => {
    const readFile = file => client.outputFileSystem.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    clientManifest = JSON.parse(readFile('vue-ssr-client-manifest.json'))
    if (bundle) {
      ready(bundle, {clientManifest})
    }
  })
  app.use(require('webpack-hot-middleware')(client))

  //serverCompiler
  const server = webpack(serverConfig)
  server.outputFileSystem = new MFS()
  server.watch({}, (err, stats) => {
    const readFile = file => server.outputFileSystem.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile('vue-ssr-server-bundle.json'))
    if (clientManifest) {
      ready(bundle, {clientManifest})
    }
  })

  return readyPromise
}